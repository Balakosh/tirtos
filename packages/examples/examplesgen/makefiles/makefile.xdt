%%{
    var tool = $args[0];
    var exampleCFlag = $args[1];
    var percent = "%";
    var COMPILER_OPT;
    var LINKER_OPT;

    if (tool == "IAR") {
        COMPILER_OPT = "-f $(NAME)/compiler.opt -o $@";
        LINKER_OPT = "-f $(NAME)/linker.cmd";
    }
    else if (tool == "TI") {
        COMPILER_OPT = " --cmd_file=$(NAME)/compiler.opt --output_file=$@";
        LINKER_OPT = " -z -l$(NAME)/linker.cmd";
    }
    else if (tool == "GNU") {
        COMPILER_OPT = " -c @$(NAME)/compiler.opt -o $@";
        LINKER_OPT = "";
    }
%%}
include ../makedefs

###### recursive wildcard function #######
rwildcard=$(wildcard $1$2) $(foreach d, $(wildcard $1*),$(call rwildcard,$d/,$2))

###### returns all sources in examples directory ######
SOURCES = $(wildcard *.c)

###### returns all directories except one generated by configuro ######
DIRS = $(filter-out $(NAME)/, $(wildcard */))

###### recursively find all sources in every returned directory ######
SOURCES += $(foreach d, $(DIRS),$(call rwildcard,$(d),*.c))

%if (tool == "TI") {
###### recursively find all cmd scripts in every returned directory ######
CMDS = $(foreach d, $(DIRS),$(call rwildcard,$(d),*.cmd))
%}

###### return list of .obj's from all .c's ######
OBJECTS = $(patsubst `percent`.c, `percent`.obj, $(SOURCES))

###### return example's name #######
NAME = $(strip $(patsubst `percent`.cfg, `percent`, $(wildcard *.cfg)))

###### Extend compiler options here ######

CFLAGS += `exampleCFlag`

###### Extend linker options here ######
% if (tool == "TI") {
LFLAGS += $(CMDS)
%}
% else {
LFLAGS +=
%}

.PRECIOUS: `percent`/compiler.opt `percent`/linker.cmd

all: $(NAME).out

`percent`/compiler.opt: `percent`/linker.cmd ;

`percent`.obj : `percent`.c

`percent`/linker.cmd: %.cfg
	@ echo Running Configuro...
	@ $(XDCTOOLS_INSTALLATION_DIR)/xs xdc.tools.configuro -c "$(CODEGEN_INSTALLATION_DIR)" -t $(XDCTARGET) -p $(PLATFORM) $(NAME).cfg

`percent`.obj: `percent`.c $(NAME)/compiler.opt
	@ echo Building $@
	@ $(CC)  $(CFLAGS) $< `COMPILER_OPT`

$(NAME).out: $(OBJECTS) $(NAME)/linker.cmd
	@ echo linking...
	@ $(LNK) `LINKER_OPT` $(OBJECTS) $(LFLAGS) -o $(NAME).out

clean:
	@ echo Cleaning...
	@ $(call remove, $(OBJECTS))
	@ $(call remove, $(NAME).out)
	@ $(call remove, $(NAME).map)
	@ $(RMDIR) $(NAME)
