/*
 * Copyright (c) 2013, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 *  ======== demo.cfg ========
 */

/* ================ General configuration ================ */
var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory')
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');

/*
 * Setting the Boot.bootC28 to false allows a user to load and run both cores
 * from CCS. If you want to boot both cores from flash, you'll need
 * to set Boot.bootC28 to true. This tells the M3 to initiate boot of the C28.
 */
var Boot = xdc.useModule('ti.catalog.arm.cortexm3.concertoInit.Boot');
Boot.bootFromFlash = true;
Boot.bootC28 = false;

Program.stack = 1024;

BIOS.heapSize = 0x5FC0;

Task.idleTaskStackSize = 1024;
Task.common$.namedInstance = true;

/* ================ System configuration ================ */
var SysMin = xdc.useModule('xdc.runtime.SysMin');
System.SupportProxy = SysMin;

/* ================ IPC configuration ================ */
var MultiProc = xdc.useModule('ti.sdo.utils.MultiProc');
MultiProc.setConfig("M3", ["M3", "C28"]);

var MessageQ                = xdc.useModule('ti.sdo.ipc.MessageQ');
var HeapBuf                 = xdc.useModule('ti.sysbios.heaps.HeapBuf');

/* Use the f28m35x IpcMgr to configure the shared buffers used by IPC */
var IpcMgr = xdc.useModule('ti.sdo.ipc.family.f28m35x.IpcMgr');
IpcMgr.readAddr  = 0x2007F000;
IpcMgr.writeAddr = 0x2007F800;

/* ================ Logging configuration ================ */
var LoggingSetup = xdc.useModule('ti.uia.sysbios.LoggingSetup');
LoggingSetup.eventUploadMode = LoggingSetup.UploadMode_IDLE;
var LoggerIdle = xdc.useModule('ti.uia.sysbios.LoggerIdle');
LoggerIdle.bufferSize = 256;
LoggerIdle.transportFxn = "&USBCDCD_LoggerIdle_sendData";
LoggerIdle.transportType = LoggerIdle.TransportType_USB;

/* ================ NDK configuration ================ */
var Ndk       = xdc.loadPackage('ti.ndk.config');
var Global    = xdc.useModule('ti.ndk.config.Global');
var Ip        = xdc.useModule('ti.ndk.config.Ip');
var Udp       = xdc.useModule('ti.ndk.config.Udp');
var Tcp       = xdc.useModule('ti.ndk.config.Tcp');

Udp.receiveBufSize = 2048;
Tcp.transmitBufSize = 2048;
Tcp.receiveBufSize = 2048;
Tcp.receiveBufLimit = 2048;
Global.lowTaskStackSize = 1792;
Global.normTaskStackSize = 1792;
Global.highTaskStackSize = 1792;
Global.ndkThreadStackSize = 1792;
Global.pktSizeFrameBuf = 1536;
Global.pktNumFrameBufs = 8;
Global.memRawPageCount = 8;

Global.IPv6 = false;
Global.stackLibType = Global.MIN;
Global.stackInitHook = '&AddWebFiles';
Global.stackDeleteHook = '&RemoveWebFiles';

Ip.dhcpClientMode = Ip.CIS_FLG_IFIDXVALID;

var Http = xdc.useModule('ti.ndk.config.Http');
var http0Params = new Http.Params();
http0Params.maxCon = 1;
var http0 = Http.create(http0Params);

/* ================ Driver configuration ================ */
var TIRTOS = xdc.useModule('ti.tirtos.TIRTOS');

var EMAC = xdc.useModule('ti.drivers.EMAC');
var FatFS = xdc.useModule('ti.sysbios.fatfs.FatFS');
var GPIO = xdc.useModule('ti.drivers.GPIO');
var I2C = xdc.useModule('ti.drivers.I2C');
var UART = xdc.useModule('ti.drivers.UART');
var SDSPI = xdc.useModule('ti.drivers.SDSPI');
