/*
 * Copyright (c) 2013, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 *  ======== empty.cfg ========
 */

/* ================ General configuration ================ */
var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory');
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');
var Gate = xdc.useModule('xdc.runtime.Gate');

var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Event = xdc.useModule('ti.sysbios.knl.Event');
var BIOS = xdc.useModule('ti.sysbios.BIOS');
var FatFS = xdc.useModule('ti.sysbios.fatfs.FatFS');

BIOS.swiEnabled = true;
BIOS.taskEnabled = true;
BIOS.clockEnabled = true;
BIOS.heapSize = 0x900;
BIOS.libType = BIOS.LibType_Custom;
var Mailbox = xdc.useModule('ti.sysbios.knl.Mailbox');

var Task = xdc.useModule('ti.sysbios.knl.Task');
Task.enableIdleTask = false;

var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
Semaphore.supportsEvents = true;

var Hwi = xdc.useModule('ti.sysbios.family.msp430.Hwi');
var TimestampProvider = xdc.useModule('ti.sysbios.family.msp430.TimestampProvider');

/* System stack size (used by ISRs and Swis) */
Program.stack = 0x300;

/* Allow SYS/BIOS to idle the CPU while waiting for an interrupt */
var Power = xdc.useModule('ti.sysbios.family.msp430.Power');
Power.allowDynamicMode = true;

/* Configure clock and timestamp provider */
Clock.tickSource = Clock.TickSource_TIMER;
Clock.timerId = 1;
Clock.tickMode = Clock.TickMode_PERIODIC;
Clock.swiPriority = 1;
TimestampProvider.timerId = 1;

/* ================ System configuration ================ */
var SysMin = xdc.useModule('xdc.runtime.SysMin');
System.SupportProxy = SysMin;

/* ================ Logging configuration ================ */
//var LoggingSetup = xdc.useModule('ti.uia.sysbios.LoggingSetup');

/* ================ Driver configuration ================ */
var TIRTOS = xdc.useModule('ti.tirtos.TIRTOS');
var USCIUART = xdc.useModule('ti.drivers.USCIUART');
//var SDSPI = xdc.useModule('ti.drivers.SDSPI');
//var Watchdog = xdc.useModule('ti.drivers.watchdog');
//var GPIO = xdc.useModule('ti.drivers.gpio');
//USCIUART.libType = USCIUART.LibType_NonInstrumented;

//Statically create button Hwi
var hwi0Params = new Hwi.Params();
hwi0Params.instance.name = "hwi0";
hwi0Params.arg = 0;
Program.global.hwi0 = Hwi.create(57, "&WDT_ISR", hwi0Params);
var hwi1Params = new Hwi.Params();
hwi1Params.instance.name = "hwi1";
hwi1Params.arg = 1;
Program.global.hwi1 = Hwi.create(47, "&Port1_ISR", hwi1Params);
var hwi2Params = new Hwi.Params();
hwi2Params.instance.name = "hwi2";
hwi2Params.arg = 2;
Program.global.hwi2 = Hwi.create(42, "&Port2_ISR", hwi2Params);

/* Statically create USCIUART Hwi */
var hwi3Params = new Hwi.Params();
hwi3Params.instance.name = "hwi3";
hwi3Params.arg = 0;
Program.global.hwi3 = Hwi.create(46, "&USCIUART_hwiIntFxn", hwi3Params);